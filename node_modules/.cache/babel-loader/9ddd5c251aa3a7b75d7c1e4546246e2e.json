{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nevil\\\\festivity\\\\src\\\\context\\\\NoteState.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport NoteContext from './noteContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NoteState = props => {\n  _s();\n\n  const host = \"http://localhost:5000\";\n  const notesInitial = [];\n  const [notes, setNotes] = useState(notesInitial); //Get all Notes\n\n  const getNotes = async () => {\n    //Api Call\n    const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n      method: 'GET',\n      headers: {\n        'Content-type': 'application/json',\n        'auth-token': localStorage.getItem('token')\n      }\n    });\n    const json = await response.json();\n    console.log(json);\n    setNotes(json);\n  }; //Add a Note\n\n\n  const addNote = async (title, description, tag) => {\n    //Api Call\n    const response = await fetch(`${host}/api/notes/addnote`, {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json',\n        'auth-token': localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const note = await response.json();\n    setNotes(notes.concat(note));\n  }; //Delete a Note\n\n\n  const deleteNote = async id => {\n    //Api Call\n    const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-type': 'application/json',\n        'auth-token': localStorage.getItem('token')\n      }\n    });\n    const json = response.json();\n    console.log(json);\n    console.log(\"Deleting note with\" + id);\n    const newNotes = notes.filter(note => {\n      return note._id !== id;\n    });\n    setNotes(newNotes);\n  }; //Edit a Note\n\n\n  const editNote = async (id, title, description, tag) => {\n    //Api Call\n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json',\n        'auth-token': localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const json = response.json(); //Logic to edit in Client\n\n    for (let index = 0; index < notes.length; index++) {\n      const element = notes[index];\n\n      if (element._id === id) {\n        element.title = title;\n        element.description = description;\n        element.tag = tag;\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      notes,\n      addNote,\n      deleteNote,\n      editNote,\n      getNotes\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NoteState, \"hccfwx9qLG83YV7VqgUOSPmOD6I=\");\n\n_c = NoteState;\nexport default NoteState;\n\nvar _c;\n\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"sources":["C:/Users/Nevil/festivity/src/context/NoteState.js"],"names":["React","useState","NoteContext","NoteState","props","host","notesInitial","notes","setNotes","getNotes","response","fetch","method","headers","localStorage","getItem","json","console","log","addNote","title","description","tag","body","JSON","stringify","note","concat","deleteNote","id","newNotes","filter","_id","editNote","index","length","element","children"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport NoteContext from './noteContext'\r\n\r\n\r\nconst NoteState = (props) => {\r\n  const host = \"http://localhost:5000\"\r\n  const notesInitial = []\r\n\r\n  const [notes, setNotes] = useState(notesInitial)\r\n\r\n  //Get all Notes\r\n  const getNotes = async () => {\r\n    //Api Call\r\n    const response = await fetch(`${host}/api/notes/fetchallnotes`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-type': 'application/json',\r\n        'auth-token': localStorage.getItem('token')\r\n      }\r\n    })\r\n    const json = await response.json();\r\n    console.log(json);\r\n    setNotes(json)\r\n  }\r\n\r\n  //Add a Note\r\n  const addNote = async (title, description, tag) => {\r\n    //Api Call\r\n    const response = await fetch(`${host}/api/notes/addnote`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-type': 'application/json',\r\n        'auth-token': localStorage.getItem('token')\r\n      },\r\n      body: JSON.stringify({ title, description, tag })\r\n    })\r\n    const note = await response.json();\r\n    setNotes(notes.concat(note));\r\n  }\r\n\r\n  //Delete a Note\r\n  const deleteNote = async (id) => {\r\n    //Api Call\r\n    const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-type': 'application/json',\r\n        'auth-token': localStorage.getItem('token')\r\n      }\r\n    })\r\n    const json = response.json();\r\n    console.log(json)\r\n    console.log(\"Deleting note with\" + id)\r\n    const newNotes = notes.filter((note) => { return note._id !== id })\r\n    setNotes(newNotes);\r\n  }\r\n\r\n  //Edit a Note\r\n  const editNote = async (id, title, description, tag) => {\r\n    //Api Call\r\n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-type': 'application/json',\r\n        'auth-token': localStorage.getItem('token')\r\n      },\r\n      body: JSON.stringify({ title, description, tag })\r\n    })\r\n    const json = response.json();\r\n    //Logic to edit in Client\r\n    for (let index = 0; index < notes.length; index++) {\r\n      const element = notes[index];\r\n      if (element._id === id) {\r\n        element.title = title;\r\n        element.description = description;\r\n        element.tag = tag;\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  return (\r\n    <NoteContext.Provider value={{ notes, addNote, deleteNote, editNote, getNotes}}>\r\n      {props.children}\r\n    </NoteContext.Provider>\r\n  )\r\n}\r\n\r\nexport default NoteState;"]},"metadata":{},"sourceType":"module"}